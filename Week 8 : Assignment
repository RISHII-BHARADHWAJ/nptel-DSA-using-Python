IOI Training Camp 20xx

We are well into the 21st century and school children are taught dynamic programming in class 4. The IOI training camp has degenerated into an endless sequence of tests, with negative marking. At the end of the camp, each student is evaluated based on the sum of the best contiguous segment (i.e., no gaps) of marks in the overall sequence of tests.

Students, however, have not changed much over the years and they have asked for some relaxation in the evaluation procedure. As a concession, the camp coordinators have agreed that students are allowed to drop upto a certain number of tests when calculating their best segment.

You will be given a sequence of N test marks and a number K. You have to compute the sum of the best segment in the sequence when upto K marks may be dropped from the segment.



Sol :-

n,k=map(int,input().split())
marks=[]
for i in range(n):
  marks.append(int(input()))

best = [[0 for i in range(k+1)] for j in range(n)]

best[0]=[marks[0]]*(k+1) 

for i in range(1,n):
  best[i][0] = max (best[i-1][0]+marks[i], 0)
  for j in range(1,k+1):  
    best[i][j] = max(best[i-1][j]+marks[i],best[i-1][j-1])
max=0
for i in range(n):
  if(max<best[i][k]):
    max=best[i][k]   
print(max)
